{"version":3,"sources":["store.ts","components/TweetsList/index.tsx","components/Result/index.tsx","components/Home/index.tsx","components/App/index.tsx","index.tsx"],"names":["initialState","userId","store","createStore","state","TweetsList","useState","tweetsList","setTweetsList","tweets","listItems","get_tweets","a","id","getState","axios","post","then","response","data","forEach","tweet","push","console","log","map","tw","index","className","onClick","Result","num","setNum","all","setAll","per","setPer","get","Submit","his","useHistory","submitTwitterAccount","setErr","user_id","setUserId","err","type","value","onChange","e","target","Home","exact","path","component","Top","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.357e791c.chunk.js","sourcesContent":["\nimport { createStore } from \"redux\";\n\nconst initialState = {\n  userId:\"fas\",\n};\n\nconst reducer = (state = initialState) => {\n  return state;\n};\n\nconst store = createStore(reducer);\n\nexport default store;","import React, { FC, useState, VFC } from 'react';\nimport axios from 'axios';\nimport store from '../../store';\n\nconst TweetsList: FC = () => {\n    const [tweetsList, setTweetsList] = useState<any[]>([])\n    let tweets: string[] = []\n    let listItems: any[] = []\n    \n    const get_tweets = async () =>{\n        let id = store.getState().userId\n        await axios.post(`http://127.0.0.1:5000/get_tweets/?userId=${id}`)\n            .then(response => { response.data.forEach((tweet: string) => tweets.push(tweet)) })\n        console.log(tweets)\n        listItems = tweets.map((tw, index) =>{\n            return(\n                <>\n                    <li key={index} className=\"list\">\n                        {tw}\n                    </li>\n                </>\n            )}\n        )\n        setTweetsList([...listItems])\n        console.log(tweetsList)\n    }\n\n    return (\n        <>\n            <button onClick={get_tweets}>show bad tweet</button>\n         \n                <ul>\n                    {tweetsList}\n                </ul>\n        </>\n    )\n}\n\nexport default TweetsList\n\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport store from '../../store';\nimport TweetsList from '../TweetsList';\nimport './style.css';\n\n\nconst Result : React.FC = () => {\n    let id = store.getState().userId\n    const [num, setNum] = useState<number>();\n    const [all, setAll] = useState<number>();\n    const [per, setPer] = useState<number>();\n\n    (async() => {\n        await axios.post(`http://127.0.0.1:5000/all/?userId=${id}`).then(response => setAll(response.data))\n        await axios.post(`http://127.0.0.1:5000/test/?userId=${id}`)\n            .then(response => setNum(response.data))\n            setPer(num!/all! *100)\n      })();\n    return (\n        <div className=\"results\">  \n            <div className=\"fas\">\n                <div className=\"child\">\n                <TweetsList />\n                </div>\n            </div>\n            <div className=\"fas\">\n                <h2 className=\"child\">There are <span>{num}</span>  tweets that contain bad words</h2>\n            </div>\n            <div className=\"fas\">\n                <h3 className=\"child\"><span>{per}%</span> tweets have bad words</h3> \n            </div>\n        </div>\n    )\n}\n\nexport default Result;","import React, { FC, useState } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport {useHistory, Route,BrowserRouter as Router} from 'react-router-dom'\nimport Result from '../Result';\nimport store from '../../store';\n\naxios.get('http://127.0.0.1:5000/test').then(response => console.log(response.data))\naxios.post('http://127.0.0.1:5000/users/?user_id=Fuck').then(response => console.log(response.data))\n\n    \nconst Submit:  React.FC = () => {\n    const his = useHistory();\n    const submitTwitterAccount = async () => {\n        if(!userId){\n            setErr('you must type your user id');\n            return\n        }else if (userId[0] != '@'){\n            setErr('you must start with @');\n            return\n        }\n        setErr('')\n        console.log(userId);\n        await axios.post(`http://127.0.0.1:5000/users/?user_id=${userId}`)\n        .then(response => setErr(response.data.user_id))\n        store.getState().userId = userId\n        console.log(store.getState())\n        his.push(\"/Result\")\n        \n    }\n\n \n\n    const [userId, setUserId]  = useState('');\n    const [err ,setErr] = useState('')\n    const getValueId = (e: { target: { value: string; }; }) => {\n        setUserId(() => e.target.value)\n    }\n\n    return (\n        <>\n            {/* <div className=\"tweets\">\n                    <TweetsList />\n            </div> */}\n            <div className=\"home\">\n                <h1>Enter Your Twitter account id</h1>\n                <p>{ err }</p>\n                <input type=\"text\" value={userId} onChange={getValueId} />\n                <button onClick={submitTwitterAccount} className=\"good\">submit</button>\n            </div>\n            \n        </>\n    )\n}\nconst Home =() => {\n    return (\n        <Router>\n            <Route exact path=\"/Home\" component={Submit}/>\n            <Route exact path=\"/Result\" component={Result}/>\n        </Router>\n    )\n}\nexport default Home;","import React from 'react';\nimport './style.css';\n\nimport { Route,BrowserRouter as Router, useHistory } from 'react-router-dom';\nimport Home from '../Home';\nimport Result from '../Result';\nimport store from '../../store';\n\nconst Top = () => {\n  const his = useHistory();\n  function goHome() {\n    his.push(\"/Home\")\n    return\n  }\n  return (\n    <div className=\"App-header\">\n            <h1> Are your tweets okay?</h1>\n            <button onClick={goHome}>START HERE</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/\"  component={Top}/>\n        <Route exact path=\"/Home\" component={Home}/>\n        {/* <Route exact path=\"/Result\" component={Result} /> */}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport Home from './components/Home';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n          <Route exact path='/'>\n            <App/>\n          </Route>\n          <Route path=\"/Home\" > \n            <Home />\n          </Route>\n    </Router>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}