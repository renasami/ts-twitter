[{"/Users/ren/myjlab/ts-twitter/front/src/index.tsx":"1","/Users/ren/myjlab/ts-twitter/front/src/reportWebVitals.ts":"2","/Users/ren/myjlab/ts-twitter/front/src/components/App/index.tsx":"3","/Users/ren/myjlab/ts-twitter/front/src/components/Home/index.tsx":"4","/Users/ren/myjlab/ts-twitter/front/src/components/atoms/Button/index.tsx":"5","/Users/ren/myjlab/ts-twitter/front/src/components/TweetsList/index.tsx":"6","/Users/ren/myjlab/ts-twitter/front/src/components/Result/index.tsx":"7","/Users/ren/myjlab/ts-twitter/front/src/store.ts":"8"},{"size":728,"mtime":1625564974565,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1623544263983,"results":"11","hashOfConfig":"12"},{"size":784,"mtime":1626269318991,"results":"13","hashOfConfig":"10"},{"size":1918,"mtime":1628567465134,"results":"14","hashOfConfig":"10"},{"size":278,"mtime":1625457726754,"results":"15","hashOfConfig":"12"},{"size":1083,"mtime":1626274994745,"results":"16","hashOfConfig":"10"},{"size":1207,"mtime":1626277535461,"results":"17","hashOfConfig":"10"},{"size":204,"mtime":1626268720109,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15apkcw",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vly25g",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ren/myjlab/ts-twitter/front/src/index.tsx",[],"/Users/ren/myjlab/ts-twitter/front/src/reportWebVitals.ts",[],"/Users/ren/myjlab/ts-twitter/front/src/components/App/index.tsx",["40","41"],"import React from 'react';\nimport './style.css';\n\nimport { Route,BrowserRouter as Router, useHistory } from 'react-router-dom';\nimport Home from '../Home';\nimport Result from '../Result';\nimport store from '../../store';\n\nconst Top = () => {\n  const his = useHistory();\n  function goHome() {\n    his.push(\"/Home\")\n    return\n  }\n  return (\n    <div className=\"App-header\">\n            <h1> Are your tweets okay?</h1>\n            <button onClick={goHome}>START HERE</button>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/\"  component={Top}/>\n        <Route exact path=\"/Home\" component={Home}/>\n        {/* <Route exact path=\"/Result\" component={Result} /> */}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/ren/myjlab/ts-twitter/front/src/components/Home/index.tsx",["42","43"],"import React, { FC, useState } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport {useHistory, Route,BrowserRouter as Router} from 'react-router-dom'\nimport Result from '../Result';\nimport store from '../../store';\n\naxios.get('http://127.0.0.1:5000/test').then(response => console.log(response.data))\naxios.post('http://127.0.0.1:5000/users/?user_id=Fuck').then(response => console.log(response.data))\n\n    \nconst Submit:  React.FC = () => {\n    const his = useHistory();\n    const submitTwitterAccount = async () => {\n        if(!userId){\n            setErr('you must type your user id');\n            return\n        }else if (userId[0] != '@'){\n            setErr('you must start with @');\n            return\n        }\n        setErr('')\n        console.log(userId);\n        await axios.post(`http://127.0.0.1:5000/users/?user_id=${userId}`)\n        .then(response => setErr(response.data.user_id))\n        store.getState().userId = userId\n        console.log(store.getState())\n        his.push(\"/Result\")\n        \n    }\n\n \n\n    const [userId, setUserId]  = useState('');\n    const [err ,setErr] = useState('')\n    const getValueId = (e: { target: { value: string; }; }) => {\n        setUserId(() => e.target.value)\n    }\n\n    return (\n        <>\n            {/* <div className=\"tweets\">\n                    <TweetsList />\n            </div> */}\n            <div className=\"home\">\n                <h1>Enter Your Twitter account id</h1>\n                <p>{ err }</p>\n                <input type=\"text\" value={userId} onChange={getValueId} />\n                <button onClick={submitTwitterAccount} className=\"good\">submit</button>\n            </div>\n            \n        </>\n    )\n}\nconst Home =() => {\n    return (\n        <Router>\n            <Route exact path=\"/Home\" component={Submit}/>\n            <Route exact path=\"/Result\" component={Result}/>\n        </Router>\n    )\n}\nexport default Home;","/Users/ren/myjlab/ts-twitter/front/src/components/atoms/Button/index.tsx",["44"],"import React, { FC } from 'react';\nimport './style.css';\n\ntype Props = {\n    content?: string;\n    href?: string ;\n}\n\n\nconst Button:  React.FC<Props> = (props) => {\n\n    return (\n        <a href={props.href} className=\"button\">{props.content}</a>\n    )\n}\n\nexport default Button;",["45","46"],"/Users/ren/myjlab/ts-twitter/front/src/components/TweetsList/index.tsx",["47"],"import React, { FC, useState, VFC } from 'react';\nimport axios from 'axios';\nimport store from '../../store';\n\nconst TweetsList: FC = () => {\n    const [tweetsList, setTweetsList] = useState<any[]>([])\n    let tweets: string[] = []\n    let listItems: any[] = []\n    \n    const get_tweets = async () =>{\n        let id = store.getState().userId\n        await axios.post(`http://127.0.0.1:5000/get_tweets/?userId=${id}`)\n            .then(response => { response.data.forEach((tweet: string) => tweets.push(tweet)) })\n        console.log(tweets)\n        listItems = tweets.map((tw, index) =>{\n            return(\n                <>\n                    <li key={index} className=\"list\">\n                        {tw}\n                    </li>\n                </>\n            )}\n        )\n        setTweetsList([...listItems])\n        console.log(tweetsList)\n    }\n\n    return (\n        <>\n            <button onClick={get_tweets}>show bad tweet</button>\n         \n                <ul>\n                    {tweetsList}\n                </ul>\n        </>\n    )\n}\n\nexport default TweetsList\n\n","/Users/ren/myjlab/ts-twitter/front/src/components/Result/index.tsx",[],"/Users/ren/myjlab/ts-twitter/front/src/store.ts",[],{"ruleId":"48","severity":1,"message":"49","line":6,"column":8,"nodeType":"50","messageId":"51","endLine":6,"endColumn":14},{"ruleId":"48","severity":1,"message":"52","line":7,"column":8,"nodeType":"50","messageId":"51","endLine":7,"endColumn":13},{"ruleId":"48","severity":1,"message":"53","line":1,"column":17,"nodeType":"50","messageId":"51","endLine":1,"endColumn":19},{"ruleId":"54","severity":1,"message":"55","line":18,"column":29,"nodeType":"56","messageId":"57","endLine":18,"endColumn":31},{"ruleId":"48","severity":1,"message":"53","line":1,"column":17,"nodeType":"50","messageId":"51","endLine":1,"endColumn":19},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"48","severity":1,"message":"62","line":1,"column":31,"nodeType":"50","messageId":"51","endLine":1,"endColumn":34},"@typescript-eslint/no-unused-vars","'Result' is defined but never used.","Identifier","unusedVar","'store' is defined but never used.","'FC' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-native-reassign",["63"],"no-negated-in-lhs",["64"],"'VFC' is defined but never used.","no-global-assign","no-unsafe-negation"]