[{"/Users/ren/myjlab/ts-twitter/front/src/index.tsx":"1","/Users/ren/myjlab/ts-twitter/front/src/reportWebVitals.ts":"2","/Users/ren/myjlab/ts-twitter/front/src/components/App/index.tsx":"3","/Users/ren/myjlab/ts-twitter/front/src/components/Home/index.tsx":"4","/Users/ren/myjlab/ts-twitter/front/src/components/atoms/Button/index.tsx":"5","/Users/ren/myjlab/ts-twitter/front/src/components/TweetsList/index.tsx":"6"},{"size":728,"mtime":1625564974565,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1623544263983,"results":"9","hashOfConfig":"8"},{"size":347,"mtime":1625457734404,"results":"10","hashOfConfig":"8"},{"size":1524,"mtime":1625816355084,"results":"11","hashOfConfig":"8"},{"size":278,"mtime":1625457726754,"results":"12","hashOfConfig":"8"},{"size":981,"mtime":1625816240725,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1vly25g",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/ren/myjlab/ts-twitter/front/src/index.tsx",[],["30","31"],"/Users/ren/myjlab/ts-twitter/front/src/reportWebVitals.ts",[],"/Users/ren/myjlab/ts-twitter/front/src/components/App/index.tsx",[],"/Users/ren/myjlab/ts-twitter/front/src/components/Home/index.tsx",["32","33","34"],"import React, { FC, useState } from 'react';\nimport './style.css';\nimport Button from '../atoms/Button'\nimport TweetsList from '../TweetsList';\nimport axios from 'axios'\ntype Props = {\n    \n}\naxios.get('http://127.0.0.1:5000/').then(response => console.log(response.data))\naxios.post('http://localhost:5000/users/?user_id=Fuck').then(response => console.log(response.data))\n\nconst Home:  React.FC<Props> = (props) => {\n\n    const submitTwitterAccount = async () => {\n        if(!userId){\n            setErr('you must type your user id');\n            return\n        }else if (userId[0] != '@'){\n            setErr('you must start with @');\n            return\n        }\n        setErr('')\n        console.log(userId);\n        await axios.post(`http://localhost:5000/users/?user_id=${userId}`)\n        .then(response => setErr(response.data.user_id))\n        \n    }\n\n \n\n    const [userId, setUserId]  = useState('');\n    const [err ,setErr] = useState('')\n    const getValueId = (e: { target: { value: string; }; }) => {\n        setUserId(() => e.target.value)\n    }\n\n    return (\n        <>\n            <div className=\"tweets\">\n                    <TweetsList />\n            </div>\n            <div className=\"home\">\n                <h1>Enter Your Twitter account id</h1>\n                <p>{ err }</p>\n                <input type=\"text\" value={userId} onChange={getValueId} />\n                <button onClick={submitTwitterAccount} className=\"good\">submit</button>\n            </div>\n        </>\n    )\n}\n\nexport default Home;","/Users/ren/myjlab/ts-twitter/front/src/components/atoms/Button/index.tsx",["35"],"import React, { FC } from 'react';\nimport './style.css';\n\ntype Props = {\n    content?: string;\n    href?: string ;\n}\n\n\nconst Button:  React.FC<Props> = (props) => {\n\n    return (\n        <a href={props.href} className=\"button\">{props.content}</a>\n    )\n}\n\nexport default Button;","/Users/ren/myjlab/ts-twitter/front/src/components/TweetsList/index.tsx",["36","37"],"import React, { FC, Props, useState, VFC } from 'react';\nimport axios from 'axios';\n\nconst TweetsList: FC = () => {\n    const [tweetsList, setTweetsList] = useState<any[]>([])\n    let tweets: string[] = []\n    let listItems: any[] = []\n    const get_tweets = async () =>{\n        await axios.get(`http://localhost:5000/get_tweets/`)\n            .then(response => { response.data.forEach((tweet: string) => tweets.push(tweet)) })\n        console.log(tweets)\n        listItems = tweets.map((tw, index) =>{\n            return(\n                <>\n                    <li key={index}>\n                        {tw}\n                    </li>\n                    <hr />\n                </>\n            )}\n        )\n        setTweetsList([...listItems])\n        console.log(tweetsList)\n    }\n\n    return (\n        <>\n            <button onClick={get_tweets}>get_tweets</button>\n            <ul>\n                {tweetsList}\n            </ul>\n        </>\n    )\n}\n\nexport default TweetsList\n\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":19},{"ruleId":"42","severity":1,"message":"46","line":3,"column":8,"nodeType":"44","messageId":"45","endLine":3,"endColumn":14},{"ruleId":"47","severity":1,"message":"48","line":18,"column":29,"nodeType":"49","messageId":"50","endLine":18,"endColumn":31},{"ruleId":"42","severity":1,"message":"43","line":1,"column":17,"nodeType":"44","messageId":"45","endLine":1,"endColumn":19},{"ruleId":"42","severity":1,"message":"51","line":1,"column":21,"nodeType":"44","messageId":"45","endLine":1,"endColumn":26},{"ruleId":"42","severity":1,"message":"52","line":1,"column":38,"nodeType":"44","messageId":"45","endLine":1,"endColumn":41},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"@typescript-eslint/no-unused-vars","'FC' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Props' is defined but never used.","'VFC' is defined but never used.","no-global-assign","no-unsafe-negation"]